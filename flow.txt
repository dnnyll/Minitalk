# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    flow.txt                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: daniefe2 <daniefe2@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: Invalid date        by                   #+#    #+#              #
#    Updated: 2025/05/15 23:00:09 by daniefe2         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

/* ************************************************************************** */
/*                                                                            */
/*                           MINITALK CLIENT FLOW                             */
/*                                                                            */
/*                          ┌────────────────────────┐                        */
/*                          │        client.c        │                        */
/*                          └────────────────────────┘                        */
/*                                                                            */
/* 1. ARGUMENT PARSING AND SETUP                                              */
/* -------------------------------------------------------------------------- */
/* • main(int argc, char **argv)                                              */
/*    - Checks that exactly 3 arguments are passed:                           */
/*         argv[1] = server PID (as string)                                   */
/*         argv[2] = message to send                                          */
/*    - If not, prints usage using ft_printf and exits.                       */
/*                                                                            */
/* • signal(SIGUSR1, handle_read_receipt)                                     */
/* • signal(SIGUSR2, handle_read_receipt)                                     */
/*    - Sets up signal handlers to print feedback for each bit received.     */
/*    - When SIGUSR1 or SIGUSR2 is received, a confirmation is printed:       */
/*         > "Received bit 1" or "Received bit 0"                             */
/*                                                                            */
/* • ft_atoi(argv[1])                                                         */
/*    - Converts the PID string to an integer.                                */
/*                                                                            */
/* 2. SENDING THE MESSAGE BIT BY BIT                                          */
/* -------------------------------------------------------------------------- */
/* • send_signal(int pid, unsigned char character)                            */
/*    - Loops over the 8 bits of the character, from MSB to LSB.             */
/*    - At each iteration:                                                    */
/*         > Right-shifts character by i bits                                 */
/*         > If resulting bit is even → send SIGUSR2                          */
/*         > If resulting bit is odd  → send SIGUSR1                          */
/*         > After each signal, pauses briefly with usleep(420)              */
/*    - Repeats until all 8 bits are sent.                                    */
/*                                                                            */
/* • main(...) (continued)                                                    */
/*    - Iterates over each character in message string                        */
/*         > Calls send_signal(pid, message[i])                               */
/*    - Sends an extra NULL character ('\0') at the end to signal EOF.       */
/*                                                                            */
/*                          ┌────────────────────────┐                        */
/*                          │        server.c        │                        */
/*                          └────────────────────────┘                        */
/*                                                                            */
/* 3. SERVER SETUP                                                            */
/* -------------------------------------------------------------------------- */
/* • main(void)                                                               */
/*    - Sets up struct sigaction with SA_SIGINFO flag                        */
/*    - Assigns handle_signal as the callback function                        */
/*    - Registers SIGUSR1 and SIGUSR2 with sigaction                          */
/*    - Prints server PID using ft_printf                                     */
/*    - Enters infinite pause() loop to wait for incoming signals             */
/*                                                                            */
/* 4. RECEIVING AND REBUILDING CHARACTERS                                     */
/* -------------------------------------------------------------------------- */
/* • handle_signal(int signal, siginfo_t *info, void *context)               */
/*    - Reconstructs characters bit by bit using static variables:            */
/*         > current_char: stores the character being rebuilt                */
/*         > bit_index:    tracks how many bits have been received           */
/*                                                                            */
/*    - When a signal arrives:                                                */
/*         > Adds 1 to current_char if signal is SIGUSR1                      */
/*         > Leaves current_char unchanged if SIGUSR2                        */
/*         > Increments bit_index                                             */
/*         > If bit_index == 8:                                               */
/*              - If current_char == '\0' → end of transmission               */
/*                  > Prints newline                                          */
/*              - Else                                                        */
/*                  > Prints received character via ft_printf                */
/*              - Resets bit_index and current_char                          */
/*         > If not 8 yet, shifts current_char left by 1 bit                 */
/*                                                                            */
/*    - Sends acknowledgment back to client:                                 */
/*         > Sends SIGUSR1 if received SIGUSR1                                */
/*         > Sends SIGUSR2 if received SIGUSR2                                */
/*                                                                            */
/*                          ┌────────────────────────┐                        */
/*                          │      minitalk.h        │                        */
/*                          └────────────────────────┘                        */
/*                                                                            */
/* 5. HEADER DECLARATIONS                                                     */
/* -------------------------------------------------------------------------- */
/* • Includes standard libraries and ft_printf header                         */
/* • Defines END_TRANSMISSION as '\0'                                         */
/* • Declares all relevant function prototypes:                               */
/*         > handle_signal, handle_read_receipt                               */
/*         > send_signal, ft_atoi                                             */
/*                                                                            */
/* 6. COMMUNICATION FLOW SUMMARY                                              */
/* -------------------------------------------------------------------------- */
/* CLIENT SIDE:                                                               */
/*    - Parses PID and message                                                */
/*    - Converts each char to bits, sends one by one using kill()            */
/*    - Waits briefly between signals                                         */
/*    - Sends '\0' as end-of-transmission signal                             */
/*                                                                            */
/* SERVER SIDE:                                                               */
/*    - Waits for signals via pause()                                        */
/*    - Receives bits, reconstructs character                                */
/*    - Once 8 bits are received:                                            */
/*         > Prints character or newline                                     */
/*    - Sends acknowledgment signal back after each bit                      */
/*                                                                            */
/* 7. DEBUGGING HELPERS                                                       */
/* -------------------------------------------------------------------------- */
/* • handle_read_receipt prints when each bit is confirmed                   */
/*    > "Received bit 1" or "Received bit 0"                                 */
/*    > Helps track message progress                                         */
/*                                                                            */
/* ************************************************************************** */
